package com.damianogiusti.hilt.sample

import androidx.fragment.app.Fragment
import androidx.fragment.app.testing.FragmentScenario
import androidx.fragment.app.testing.launchFragmentInContainer
import androidx.lifecycle.ViewModelProvider
import com.damianogiusti.hilt.HiltFragmentFactory

/**
 * Kotlin-friendly extension for simplifying Fragments and ViewModels usage in UI tests.
 *
 * Usage:
 * ```
 * launchFragmentInContainer<TestFragment, TestViewModelFactory> {
 *   onViewModel<TestViewModel> { viewModel ->
 *     viewModel.doSomethingForUpdatingUi()
 *   }
 *   onFragment { fragment ->
 *     fragment.doSomething()
 *   }
 *   // Assert on view state.
 *   onView(...).check(...)
 * }
 * ```
 *
 * It uses [HiltFragmentFactory] as custom Fragment factory, which allows to swap the default
 * [ViewModelProvider.Factory] generated by Hilt.
 *
 * @see HiltFragmentFactory
 *
 * Created by Damiano Giusti on 09/12/2020.
 */
inline fun <reified F: Fragment> launchFragmentInContainer(
    viewModelFactory: ViewModelProvider.Factory,
    crossinline block: FragmentScenario<F>.() -> Unit
) {
    val scenario = launchFragmentInContainer<F>(
        themeResId = R.style.Theme_HiltFragmentRule,
        factory = HiltFragmentFactory(viewModelFactory)
    )
    scenario.block()
}